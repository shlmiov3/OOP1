testPartA_EXP
	|m|
	m := Monom new.
	m exp: 13.
	self assert: ((m exp)= 13).
	self assert: ((m exp: 0.5)= (self error: 'invalid input')).
	self assert: ((m exp: -5)= (self error: 'invalid input')).
	self assert: ((m exp: -0.5)= (self error: 'invalid input')).
	self assert: ((m exp: $F)= (self error: 'invalid input')).
	self assert: ((m exp: 2.0)= (self error: 'invalid input')).
	m exp: 0.
	self assert: ((m exp)= 0).
	
testPartA_COEF
	|m|
	m := Monom new.
	m coef: -3.
	self assert: ((m coef)= -3).
	m coef: -0.
	self assert: ((m coef)= 0).
	m coef: 13.
	self assert: ((m coef)= 13).
	m coef: 0.
	self assert: ((m coef)= 0).
	self assert: ((m coef: 0.5) = (self error: 'invalid input')).
	self assert: ((m coef: -0.5)= (self error: 'invalid input')).
	self assert: ((m coef: $F)= (self error: 'invalid input')).
	self assert: ((m coef: 2.0)= (self error: 'invalid input')).
	
testPartA_DERIVATIVE
	|m ret_m|
	m := Monom new.
	ret_m := m derivative.
	self assert: (((ret_m coef) = 0) and:[(ret_m exp) = 0]).
	
	m exp: 0.
	m coef: 1.
	ret_m := m derivative.
	self assert: (((ret_m coef) = 0) and:[(ret_m exp) = 0]).
	
	m exp: 1.
	m coef: 0.
	ret_m := m derivative.
	self assert: (((ret_m coef) = 0) and:[(ret_m exp) = 0]).
	
	m exp: 0.
	m coef: -1.
	ret_m := m derivative.
	self assert: (((ret_m coef) = 0) and:[(ret_m exp) = 0]).
	
	m exp: 2.
	m coef: -2.
	ret_m := m derivative.
	self assert: (((ret_m coef) = -4) and:[(ret_m exp) = 1]).

	m exp: 2.
	m coef: 2.
	ret_m := m derivative.
	self assert: (((ret_m coef) = 4) and:[(ret_m exp) = 1]).	
	
	m exp: 15.
	m coef: 2.
	ret_m := m derivative.
	self assert: (((ret_m coef) = 30) and:[(ret_m exp) = 14]).
	m exp: 7.
	m coef: 8.
	self assert: (((ret_m coef) = 30) and:[(ret_m exp) = 14]).
	
testPartA_POLY_Sainity
	|p p_dic|
	p := Polynom new.
	p_dic := p asDictionary.
	self assert: (p_dic = Dictionary new).
	
testPartA_POLY_ADDMONOM
	|p p2 p_dic m currect_res|
	
	m := Monom new.
	m exp: 2. m coef: -2.
	
	currect_res := Dictionary new.
	currect_res at: 1 put: 2.
	currect_res at: 2 put: -2.
	
	p:= Polynom new.
	p addMonom: m.
	
	m exp: 1. m coef: 2.
	p addMonom: m.
	
	p_dic := p asDictionary.
	self assert: (p_dic = currect_res).
	
"================================================================"

	m := Monom new.
	m exp: 1. m coef: 2.
	
	p:= Polynom new.
	p addMonom: m.
	
	m exp: 1. m coef: -2.
	p addMonom: m.
	
	p_dic := p asDictionary.
	self assert: (p_dic = Dictionary new).

"================================================================"

	m := Monom new.
	p:= Polynom new.
	
	m exp: 1. m coef: 2.
	p addMonom: m.
	
	m exp: 2. m coef: 2.
	p addMonom: m.
	
	m exp: 2. m coef: -2.
	p addMonom: m.
	
	currect_res := Dictionary new.
	currect_res at: 1 put: 2.
	
	p_dic := p asDictionary.
	self assert: (p_dic = currect_res).

"================================================================"

	m := Monom new.
	p:= Polynom new.
	
	m exp: 1. m coef: 2.
	p addMonom: m.
	
	m exp: 0. m coef: 0.
	p addMonom: m.
	
	currect_res := Dictionary new.
	currect_res at: 1 put: 2.
	
	p_dic := p asDictionary.
	self assert: (p_dic = currect_res).
	
"================================================================"

	m := Monom new.
	p:= Polynom new.
	
	p addMonom: m.
	
	p_dic := p asDictionary.
	self assert: (p_dic = Dictionary new).
	
"================================================================"

	m := Monom new.
	p:= Polynom new.
	p2:= Polynom new.
	
	m exp: 1. m coef: 2.
	p addMonom: m.
	p2 addMonom: m.
	
	m exp: 2. m coef: 2.
	p addMonom: m.
	p2 addMonom: m.
		
	self assert: ((p addMonom: p2) = self error: 'invalid input').
		
"================================================================"

	m := Monom new.
	p:= Polynom new.
	
	m exp: 1. m coef: 2.
	p addMonom: m.
	
	m exp: 2. m coef: 2.
	p addMonom: m.
		
	self assert: ((p addMonom: (0.2)) = self error: 'invalid input').

"================================================================"

	m := Monom new.
	p:= Polynom new.
	
	m exp: 1. m coef: 2.
	p addMonom: m.
	
	m exp: 2. m coef: -2.
	p addMonom: m.
	
	m exp: 5. m coef: 4.
	
	currect_res := Dictionary new.
	currect_res at: 1 put: 2.
	currect_res at: 2 put: -2.
	
	p_dic := p asDictionary.
	self assert: (p_dic = currect_res).

"================================================================"

	m := Monom new.
	p:= Polynom new.
	
	m exp: 4. m coef: 2.
	p addMonom: m.
	
	m exp: 4. m coef: -3.
	p addMonom: m.
		
	currect_res := Dictionary new.
	currect_res at: 4 put: -1.
	
	p_dic := p asDictionary.
	self assert: (p_dic = currect_res).
	
testPartA_POLY_STATE: aPolynom
	| p_dic |
	p_dic := aPolynom asDictionary.
	((p_dic occurrencesOf 0) = 0) ifFalse [^false] ifTrue [^true].
	
testPartA_POLY_MULTIPLYBYMONOM
	|p p2 p_dic m currect_res|	
	
	m := Monom new.
	p:= Polynom new.
	
	m exp: 2. m coef: 2.
	p addMonom: m.
	m exp: 3. m coef: 4.
	p addMonom: m.
	
	m exp: 5. m coef: 0.
	p := p multiplyByMonom: m.
	currect_res := Dictionary new.
	p_dic = p asDictionary.
	self assert: (p_dic = currect_res).
	
"****************************************************************"

	m := Monom new.
	p:= Polynom new.
	
	m exp: 2. m coef: -2.
	p := p multiplyByMonom: m.
	currect_res := Dictionary new.
	p_dic = p asDictionary.
	self assert: (p_dic = currect_res).

"****************************************************************"
	
	m := Monom new.
	p:= Polynom new.
	
	m exp: 2. m coef: 2.
	p addMonom: m.
	
	m exp: 2. m coef: -2.
	p := p multiplyByMonom: m.
	currect_res := Dictionary new.
	currect_res at: 4 put: -4.
	
	p_dic = p asDictionary.
	self assert: (p_dic = currect_res).
	
"****************************************************************"
	
	m := Monom new.
	p:= Polynom new.
	p2:= Polynom new.
	
	m exp: 2. m coef: 2.
	p addMonom: m.
	p2 addMonom: m.
	
	m exp: 3. m coef: 4.
	p addMonom: m.
	p2 addMonom: m.
	
	[p multiplyByMonom: p2] on: Error 
	do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].
	
"****************************************************************"
	
	m := Monom new.
	p:= Polynom new.
	
	m exp: 2. m coef: 2.
	p addMonom: m.
	m exp: 3. m coef: 4.
	p addMonom: m.
	
	p := p multiplyByMonom: m.
	p_dic = p asDictionary.
	
	currect_res := Dictionary new.
	currect_res at: 2 put: 2.
	currect_res at: 3 put: 4.
	
	self assert: (p_dic = currect_res).
	m exp: 9. m coef: 10.
	self assert: (p_dic = currect_res).
	
"****************************************************************"
	
	m := Monom new.
	p:= Polynom new.
	
	m exp: 2. m coef: 2.
	p addMonom: m.
	
	[p multiplyByMonom: (0.5)] on: Error 
	do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].

testPartA_POLY_ASDICTIONARY
	|p p2 p_dic m currect_res|	
	
	p:= Polynom new.
	
	p_dic := p asDictionary.
	self assert: (p_dic = Dictionary new).
	
"****************************************************************"
"****************************************************************"
	
	p := Polynom new.
	m := Monom new.
	m exp: 3. m coef: 1.
	p addMonom: m.
	p_dic = p asDictionary.
	
	currect_res := Dictionary new.
	currect_res at: 3 put: 1.
	
	self assert: (p_dic = currect_res).
	
"****************************************************************"
"****************************************************************"
	
	p := Polynom new.
	m := Monom new.
	
	m exp: 0. m coef: 3.
	p addMonom: m.
	m exp: 4. m coef: 3.
	p addMonom: m.
	p_dic = p asDictionary.
	
	currect_res := Dictionary new.
	currect_res at: 0 put: 3.
	currect_res at: 4 put: 3.
	
	self assert: (p_dic = currect_res).

"****************************************************************"
"****************************************************************"

	p := Polynom new.
	m := Monom new.
	
	m exp: 0. m coef: 0.
	p addMonom: m.
	m exp: 1. m coef: 0.
	p addMonom: m.
	m exp: 2. m coef: 0.
	p addMonom: m.
	m exp: 3. m coef: 0.
	p addMonom: m.
	p_dic = p asDictionary.
	
	self assert: (p_dic = Dictionary new).

testPartA_POLY_DERIVATIVE
	|p p2 p_dic m currect_res|
	
	p := Polynom new.
	m := Monom new.
	m exp: 0. m coef: 3.
	p addMonom: m.
	
	p := p derivative.
	p_dic := p asDictionary.
	
	self assert: (p_dic = Dictionary new).

"================================================================"
"================================================================"

	p := Polynom new.
	m := Monom new.
	m exp: 0. m coef: 3.
	p addMonom: m.
	m exp: 3. m coef: 1.
	p addMonom: m.
	
	p := p derivative.
	p_dic := p asDictionary.
	
	currect_res := Dictionary new.
	currect_res at: 2 put: 3.
	
	self assert: (p_dic = currect_res).
	
"================================================================"
"================================================================"

	p := Polynom new.
	m := Monom new.
	m exp: 4. m coef: 3.
	p addMonom: m.
	m exp: 0. m coef: 3.
	p addMonom: m.
	
	p := p derivative.
	p_dic := p asDictionary.
	
	currect_res := Dictionary new.
	currect_res at: 3 put: 12.
	
	self assert: (p_dic = currect_res).

"================================================================"
"================================================================"

	p := Polynom new.
	m := Monom new.
	m exp: 4. m coef: 3.
	p addMonom: m.
	m exp: 5. m coef: 3.
	p addMonom: m.
	
	p := p derivative.
	p_dic := p asDictionary.
	
	currect_res := Dictionary new.
	currect_res at: 3 put: 12.
	currect_res at: 4 put: 15.
	
	self assert: (p_dic = currect_res).

"================================================================"
"================================================================"

	p := Polynom new.
	m := Monom new.
	m exp: 4. m coef: 3.
	p addMonom: m.
	m exp: 5. m coef: -3.
	p addMonom: m.
	
	p := p derivative.
	p_dic := p asDictionary.
	
	currect_res := Dictionary new.
	currect_res at: 3 put: 12.
	currect_res at: 4 put: -15.
	
	self assert: (p_dic = currect_res).
	
"================================================================"
"================================================================"

	p := Polynom new.
	m := Monom new.
	m exp: 4. m coef: 3.
	p addMonom: m.
	m exp: 5. m coef: -3.
	p addMonom: m.
	
	p2 := p derivative.
	p_dic := p2 asDictionary.
	
	currect_res := Dictionary new.
	currect_res at: 3 put: 12.
	currect_res at: 4 put: -15.
	
	self assert: (p_dic = currect_res)
	p := p derivative.
	self assert: (p_dic = currect_res)