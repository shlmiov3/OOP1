testPartB_ADD
	| p p2|
	
	p:= PolyStream new.
	[p add: 0.5] on: Error 
	do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].

"----------------------------------------------------------"

	p:= PolyStream new.
	p:= PolyStream new.
	p2 addCoef: 2 withExp: 2.
	p add: p2.
	self assert: ((p eval: 3) = 18).

"----------------------------------------------------------"

	p:= PolyStream new.
	p:= PolyStream new.
	p addCoef: 1 withExp: 2.
	p addCoef: 2 withExp: 2.
	p2 addCoef: 2 withExp: 2.
	
	p add: p2.
	self assert: ((p eval: 3) = 18).

"----------------------------------------------------------"

	p:= PolyStream new.
	p:= PolyStream new.
	p addCoef: 1 withExp: 2.
	p addCoef: 2 withExp: 2.
	p2 addCoef: 1 withExp: 2.
	p2 addCoef: 2 withExp: 2.
	
	p add: p2.
	self assert: ((p eval: 3) = 42).

"----------------------------------------------------------"	
"**********************************************************"
"----------------------------------------------------------"	

testPartB_SUBSTITUTE
	| p |	
	
	p:= PolyStream new.
	p addCoef: 2 withExp: 2.
	[p substitute: 0] on: Error 
	do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].

"----------------------------------------------------------"
	
	p:= PolyStream new.
	p addCoef: 2 withExp: 2.
	[p substitute: 0.5] on: Error 
	do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].

"----------------------------------------------------------"
	
	p:= PolyStream new.
	p addCoef: 2 withExp: 2.
	p substitute: 2.
	self assert: ((p eval: 3) = 72).

"----------------------------------------------------------"
	
	p:= PolyStream new.
	p addCoef: 2 withExp: 2.
	p substitute: -2.
	self assert: ((p eval: 3) = 72).

"----------------------------------------------------------"
	
	p:= PolyStream new.
	p addCoef: 2 withExp: 3.
	p substitute: 2.
	self assert: ((p eval: 3) = 216).

"----------------------------------------------------------"
	
	p:= PolyStream new.
	p addCoef: 2 withExp: 3.
	p addCoef: 2 withExp: 2.
	p substitute: -2.
	self assert: ((p eval: 3) = -360).
	
"----------------------------------------------------------"
"**********************************************************"
"----------------------------------------------------------"	

testPartB_MULTIPLYBY
	| p |	
	
	p:= PolyStream new.
	p addCoef: 2 withExp: 2.
	[p multiplyBy: 0.5] on: Error 
	do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].

"----------------------------------------------------------"
	
	p:= PolyStream new.
	p addCoef: 2 withExp: 2.
	p multiplyBy: 0.
	self assert: ((p eval: 3) = 0).
	
"----------------------------------------------------------"
	
	p:= PolyStream new.
	p addCoef: 2 withExp: 2.
	p multiplyBy: 2.
	self assert: ((p eval: 3) = 36).
	
"----------------------------------------------------------"
	
	p:= PolyStream new.
	p addCoef: 2 withExp: 2.
	p multiplyBy: -2.
	self assert: ((p eval: 3) = -36).
	
"----------------------------------------------------------"
	
	p:= PolyStream new.
	p addCoef: 2 withExp: 3.
	p multiplyBy: 2.
	self assert: ((p eval: 3) = -108).
	
"----------------------------------------------------------"
	
	p:= PolyStream new.
	p addCoef: 0 withExp: 2.
	p multiplyBy: 2.
	self assert: ((p eval: 3) = 0).
	
"----------------------------------------------------------"
	
	p:= PolyStream new.
	p addCoef: 1 withExp: 0.
	p multiplyBy: 2.
	self assert: ((p eval: 3) = 6).
	
"----------------------------------------------------------"
	
	p:= PolyStream new.
	p addCoef: 2 withExp: 3.
	p addCoef: 2 withExp: 2.
	p multiplyBy: -2.
	self assert: ((p eval: 3) = -144).
	
"----------------------------------------------------------"
"**********************************************************"
"----------------------------------------------------------"	

testPartB_FILTER
	| p s |	
	
	p:= PolyStream new.
	s := Set new.
	p addCoef: 2 withExp: 2.
	[p filter: 0.5] on: Error 
	do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].
	
"----------------------------------------------------------"
	
	p:= PolyStream new.
	s := Set new.
	p addCoef: 2 withExp: 2.
	s add: 2.
	p filter: s.
	self assert: ((p eval: 3) = 0).
	
"----------------------------------------------------------"
	
	p:= PolyStream new.
	s := Set new.
	p addCoef: 2 withExp: 2.
	p addCoef: 2 withExp: 3.
	s add: 2.
	p filter: s.
	self assert: ((p eval: 3) = 54).
	
"----------------------------------------------------------"
	
	p:= PolyStream new.
	s := Set new.
	p addCoef: 2 withExp: 2.
	p addCoef: 2 withExp: 3.
	s add: 2.
	s add: 3.
	p filter: s.
	self assert: ((p eval: 3) = 0).
	
"----------------------------------------------------------"
	
	p:= PolyStream new.
	s := Set new.
	p addCoef: 2 withExp: 2.
	p addCoef: 2 withExp: 3.
	s add: 2.
	s add: 3.
	p filter: s.
	
	p addCoef: 3 withExp: 2.
	
	self assert: ((p eval: 3) = 27).
	
"----------------------------------------------------------"
	
	p:= PolyStream new.
	s := Set new.
	p addCoef: 2 withExp: 2.
	p addCoef: 2 withExp: 3.
	s add: 2.
	s add: 3.
	p filter: s.
	
	p addCoef: 3 withExp: 2.
	s := Set new.
	s add: 2.
	p filter: s.
	self assert: ((p eval: 3) = 0).
	
"----------------------------------------------------------"
	
	p:= PolyStream new.
	s := Set new.
	p addCoef: 2 withExp: 2.
	p addCoef: 2 withExp: 3.
	p addCoef: 3 withExp: 5.
	s add: 2.
	s add: 3.
	p filter: s.
	
	p addCoef: 3 withExp: 2.
	s := Set new.
	s add: 5.
	p filter: s.
	
	self assert: ((p eval: 3) = 27).
	
"----------------------------------------------------------"