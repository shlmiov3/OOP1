'From Squeak5.1 of 5 September 2016 [latest update: #16549] on 6 August 2018 at 9:45:29 pm'!TestCase subclass: #TestPartA	instanceVariableNames: 'mn monomD pn derivativePn'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!TestPartA methodsFor: 'Tests' stamp: 'HW1 8/4/2018 21:07'!test	Transcript showln: 'Monom Test'.	mn := Monom new.	"Check Monom exp and coef failure error"	 [mn exp: -2] on: Error do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].	 [mn coef: 0.5] on: Error do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].	mn exp: 2.	mn coef: 3.	"Check Monom exp and coef method"	self assert: ((mn exp = 2) and: [mn coef = 3]).	"Check Monom Derivative method"	monomD := mn derivative.	self assert: ((monomD exp = 1) and: [monomD coef =6]).	"Test +,* = methods"	mn + monomD.	self assert: ((mn exp = 2) and: [mn coef = 3]).	mn := mn derivative.	self assert: (mn = monomD).	mn + monomD.	self assert: ((mn exp = 1) and: [mn coef = 12]).	mn * monomD.	self assert: ((mn exp = 2) and: [mn coef = 72]).		"Check eval method"	self assert: ((monomD eval: 2) = 12).		Transcript showln: 'Monom Success'.	! !!TestPartA methodsFor: 'Tests' stamp: 'HW1 8/6/2018 13:45'!testPartA_ADD	|newPolynom|	mn := Monom new.	pn := Polynom new.	derivativePn := Polynom new.	mn coef: 3. 	pn addMonom: mn.	derivativePn addMonom: mn.	mn exp: 4. pn addMonom: mn.	derivativePn addMonom: mn.	newPolynom := pn Add: derivativePn.		self assert: ((newPolynom eval: 1) = 12).	self assert: ((newPolynom eval: 2) = 102).	self assert: (self testPartA_POLY_STATE: pn).		pn := Polynom new.	derivativePn := Polynom new.	mn exp: 2. mn coef: 4. pn addMonom: mn.	mn  coef: 7. derivativePn addMonom: mn.	mn exp: 6. mn coef: 5. pn addMonom: mn.	mn coef: -5. derivativePn addMonom: mn.	mn exp: 5. mn coef: 4. derivativePn addMonom: mn.	newPolynom := pn Add: derivativePn.		self assert: (self testPartA_POLY_STATE: newPolynom).	self assert: ((newPolynom eval: 1) = 15).	self assert: ((newPolynom eval: 2) = 172).	mn exp: 0. mn coef: 2.	newPolynom multiplyByMonom: mn.	self assert: ((newPolynom eval: 2) = 344).	self assert: ((derivativePn eval: 2)= -164).	self assert: ((pn eval: 2) = 336).	mn coef: 5.	derivativePn multiplyByMonom: mn.	self assert: ((newPolynom eval: 2) = 344).	! !!TestPartA methodsFor: 'Tests' stamp: 'HW1 8/6/2018 11:53'!testPartA_COEF	|m|	m := Monom new.	m coef: -3.	self assert: ((m coef)= -3).	m coef: -0.	self assert: ((m coef)= 0).	m coef: 13.	self assert: ((m coef)= 13).	m coef: 0.	self assert: ((m coef)= 0).	 [m coef: 0.5] on: Error do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].	 [m coef: -0.5] on: Error do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].	 [m coef: $F] on: Error do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].	 [m coef: 5.0] on: Error do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].! !!TestPartA methodsFor: 'Tests' stamp: 'test 8/6/2018 01:07'!testPartA_DERIVATIVE	|m ret_m|	m := Monom new.	ret_m := m derivative.	self assert: (((ret_m coef) = 0) and:[(ret_m exp) = 0]).		m exp: 0.	m coef: 1.	ret_m := m derivative.	self assert: (((ret_m coef) = 0) and:[(ret_m exp) = 0]).		m exp: 1.	m coef: 0.	ret_m := m derivative.	self assert: (((ret_m coef) = 0) and:[(ret_m exp) = 0]).		m exp: 0.	m coef: -1.	ret_m := m derivative.	self assert: (((ret_m coef) = 0) and:[(ret_m exp) = 0]).		m exp: 2.	m coef: -2.	ret_m := m derivative.	self assert: (((ret_m coef) = -4) and:[(ret_m exp) = 1]).	m exp: 2.	m coef: 2.	ret_m := m derivative.	self assert: (((ret_m coef) = 4) and:[(ret_m exp) = 1]).			m exp: 15.	m coef: 2.	ret_m := m derivative.	self assert: (((ret_m coef) = 30) and:[(ret_m exp) = 14]).	m exp: 7.	m coef: 8.	self assert: (((ret_m coef) = 30) and:[(ret_m exp) = 14]).! !!TestPartA methodsFor: 'Tests' stamp: 'HW1 8/6/2018 13:25'!testPartA_EVAL	|val|	mn := Monom new.	pn := Polynom new.	val := 8.	[pn eval: $F] on: Error do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].	[pn eval: 0.5] on: Error do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].	[pn eval: 2.0] on: Error do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].	self assert: ((pn eval: val) = 0).	mn coef: 9.	pn addMonom: mn.		self assert:((pn eval: val) = 9).	mn coef: 3.	pn := Polynom new.	pn addMonom: mn.	mn exp:4.	pn addMonom: mn.	self assert:((pn eval: 2) = 51).		mn exp: 1.	pn addMonom: mn.	mn exp:2.	pn addMonom: mn.	mn exp:3. mn coef: -3.	pn addMonom: mn.		self assert: ((pn eval: -2) = 81).! !!TestPartA methodsFor: 'Tests' stamp: 'HW1 8/6/2018 11:53'!testPartA_EXP	|m|	m := Monom new.	m exp: 13.	self assert: ((m exp)= 13).	 [m exp: 0.5] on: Error do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].	 [m exp: -0.5] on: Error do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].	 [m exp: -5] on: Error do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].	 [m exp: $5] on: Error do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].	 [m exp: 5.0] on: Error do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].	m exp: 0.	self assert: ((m exp)= 0).	! !!TestPartA methodsFor: 'Tests' stamp: '? 8/6/2018 12:52'!testPartA_POLY_ADDMONOM	|p p2 p_dic m currect_res|		m := Monom new.	m exp: 2. m coef: -2.		currect_res := Dictionary new.	currect_res at: 1 put: 2.	currect_res at: 2 put: -2.		p:= Polynom new.	p addMonom: m.		m exp: 1. m coef: 2.	p addMonom: m.		p_dic := p asDictionary.	self assert: (p_dic = currect_res).	self assert:(self testPartA_POLY_STATE: p).	"================================================================"	m := Monom new.	m exp: 1. m coef: 2.		p:= Polynom new.	p addMonom: m.		m exp: 1. m coef: -2.	p addMonom: m.		p_dic := p asDictionary.	self assert: (p_dic = Dictionary new)."================================================================"	m := Monom new.	p:= Polynom new.		m exp: 1. m coef: 2.	p addMonom: m.		m exp: 2. m coef: 2.	p addMonom: m.		m exp: 2. m coef: -2.	p addMonom: m.		currect_res := Dictionary new.	currect_res at: 1 put: 2.		p_dic := p asDictionary.	self assert: (p_dic = currect_res)."================================================================"	m := Monom new.	p:= Polynom new.		m exp: 1. m coef: 2.	p addMonom: m.		m exp: 0. m coef: 0.	p addMonom: m.		currect_res := Dictionary new.	currect_res at: 1 put: 2.		p_dic := p asDictionary.	self assert: (p_dic = currect_res).	"================================================================"	m := Monom new.	p:= Polynom new.		p addMonom: m.		p_dic := p asDictionary.	self assert: (p_dic = Dictionary new).	"================================================================"	m := Monom new.	p:= Polynom new.	p2:= Polynom new.		m exp: 1. m coef: 2.	p addMonom: m.	p2 addMonom: m.		m exp: 2. m coef: 2.	p addMonom: m.	p2 addMonom: m.	 [p addMonom: p2] on: Error do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].		"================================================================"	m := Monom new.	p:= Polynom new.		m exp: 1. m coef: 2.	p addMonom: m.		m exp: 2. m coef: 2.	p addMonom: m.	[p addMonom: (0.2)] on: Error do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])]."================================================================"	m := Monom new.	p:= Polynom new.		m exp: 1. m coef: 2.	p addMonom: m.		m exp: 2. m coef: -2.	p addMonom: m.		m exp: 5. m coef: 4.		currect_res := Dictionary new.	currect_res at: 1 put: 2.	currect_res at: 2 put: -2.		p_dic := p asDictionary.	self assert: (p_dic = currect_res)."================================================================"	m := Monom new.	p:= Polynom new.		m exp: 4. m coef: 2.	p addMonom: m.		m exp: 4. m coef: -3.	p addMonom: m.			currect_res := Dictionary new.	currect_res at: 4 put: -1.		p_dic := p asDictionary.	self assert: (p_dic = currect_res).! !!TestPartA methodsFor: 'Tests' stamp: '? 8/6/2018 13:59'!testPartA_POLY_ASDICTIONARY	|p p_dic m currect_res|			p:= Polynom new.		p_dic := p asDictionary.	self assert: (p_dic = Dictionary new).	"****************************************************************""****************************************************************"		p := Polynom new.	m := Monom new.	m exp: 3. m coef: 1.	p addMonom: m.	p_dic := p asDictionary.		currect_res := Dictionary new.	currect_res at: 3 put: 1.		self assert: (p_dic = currect_res).	"****************************************************************""****************************************************************"		p := Polynom new.	m := Monom new.		m exp: 0. m coef: 3.	p addMonom: m.	m exp: 4. m coef: 3.	p addMonom: m.	p_dic := p asDictionary.		currect_res := Dictionary new.	currect_res at: 0 put: 3.	currect_res at: 4 put: 3.		self assert: (p_dic = currect_res)."****************************************************************""****************************************************************"	p := Polynom new.	m := Monom new.		m exp: 0. m coef: 0.	p addMonom: m.	m exp: 1. m coef: 0.	p addMonom: m.	m exp: 2. m coef: 0.	p addMonom: m.	m exp: 3. m coef: 0.	p addMonom: m.	p_dic := p asDictionary.		self assert: (p_dic = Dictionary new).! !!TestPartA methodsFor: 'Tests' stamp: '? 8/6/2018 13:56'!testPartA_POLY_DERIVATIVE	|p p2 p_dic m currect_res|		p := Polynom new.	m := Monom new.	m exp: 0. m coef: 3.	p addMonom: m.		p := p derivative.	p_dic := p asDictionary.		self assert: (p_dic = Dictionary new)."================================================================""================================================================"	p := Polynom new.	m := Monom new.	m exp: 0. m coef: 3.	p addMonom: m.	m exp: 3. m coef: 1.	p addMonom: m.		p := p derivative.	p_dic := p asDictionary.		currect_res := Dictionary new.	currect_res at: 2 put: 3.		self assert: (p_dic = currect_res).	"================================================================""================================================================"	p := Polynom new.	m := Monom new.	m exp: 4. m coef: 3.	p addMonom: m.	m exp: 0. m coef: 3.	p addMonom: m.		p := p derivative.	p_dic := p asDictionary.		currect_res := Dictionary new.	currect_res at: 3 put: 12.		self assert: (p_dic = currect_res)."================================================================""================================================================"	p := Polynom new.	m := Monom new.	m exp: 4. m coef: 3.	p addMonom: m.	m exp: 5. m coef: 3.	p addMonom: m.		p := p derivative.	p_dic := p asDictionary.		currect_res := Dictionary new.	currect_res at: 3 put: 12.	currect_res at: 4 put: 15.		self assert: (p_dic = currect_res)."================================================================""================================================================"	p := Polynom new.	m := Monom new.	m exp: 4. m coef: 3.	p addMonom: m.	m exp: 5. m coef: -3.	p addMonom: m.		p := p derivative.	p_dic := p asDictionary.		currect_res := Dictionary new.	currect_res at: 3 put: 12.	currect_res at: 4 put: -15.		self assert: (p_dic = currect_res).	"================================================================""================================================================"	p := Polynom new.	m := Monom new.	m exp: 4. m coef: 3.	p addMonom: m.	m exp: 5. m coef: -3.	p addMonom: m.		p2 := p derivative.	p_dic := p2 asDictionary.		currect_res := Dictionary new.	currect_res at: 3 put: 12.	currect_res at: 4 put: -15.		self assert: (p_dic = currect_res).	p := p derivative.	self assert: (p_dic = currect_res).! !!TestPartA methodsFor: 'Tests' stamp: '? 8/6/2018 14:04'!testPartA_POLY_MULTIPLYBYMONOM	|p p2 p_dic m currect_res|			m := Monom new.	p:= Polynom new.		m exp: 2. m coef: 2.	p addMonom: m.	m exp: 3. m coef: 4.	p addMonom: m.		m exp: 5. m coef: 0.	p := p multiplyByMonom: m.	currect_res := Dictionary new.	p_dic := p asDictionary.	self assert: (p_dic = currect_res).	"****************************************************************"	m := Monom new.	p:= Polynom new.		m exp: 2. m coef: -2.	p := p multiplyByMonom: m.	currect_res := Dictionary new.	p_dic := p asDictionary.	self assert: (p_dic = currect_res)."****************************************************************"		m := Monom new.	p:= Polynom new.		m exp: 2. m coef: 2.	p addMonom: m.		m exp: 2. m coef: -2.	p := p multiplyByMonom: m.	currect_res := Dictionary new.	currect_res at: 4 put: -4.		p_dic := p asDictionary.	self assert: (p_dic = currect_res).	"****************************************************************"		m := Monom new.	p:= Polynom new.	p2:= Polynom new.		m exp: 2. m coef: 2.	p addMonom: m.	p2 addMonom: m.		m exp: 3. m coef: 4.	p addMonom: m.	p2 addMonom: m.		[p multiplyByMonom: p2] on: Error 	do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].	"****************************************************************"		m := Monom new.	p:= Polynom new.		m exp: 2. m coef: 2.	p addMonom: m.	m exp: 3. m coef: 4.	p addMonom: m.		p := p multiplyByMonom: m.	p_dic := p asDictionary.		currect_res := Dictionary new.	currect_res at: 6 put: 16.	currect_res at: 5 put: 8.		self assert: (p_dic = currect_res).	m exp: 9. m coef: 10.	self assert: (p_dic = currect_res).	"****************************************************************"		m := Monom new.	p:= Polynom new.		m exp: 2. m coef: 2.	p addMonom: m.		[p multiplyByMonom: (0.5)] on: Error 	do: [:e | (e asString = 'Error: invalid input' ifFalse: [Transcript showln: e asString])].! !!TestPartA methodsFor: 'Tests' stamp: '? 8/6/2018 12:49'!testPartA_POLY_STATE: aPolynom	| p_dic |	p_dic := aPolynom asDictionary.	((p_dic occurrencesOf: 0) = 0) ifFalse: [^false] ifTrue: [^true].! !!TestPartA methodsFor: 'Tests' stamp: 'test 8/6/2018 01:11'!testPartA_POLY_Sainity	|p p_dic|	p := Polynom new.	p_dic := p asDictionary.	self assert: (p_dic = Dictionary new).! !!TestPartA methodsFor: 'Tests' stamp: 'HW1 8/6/2018 12:40'!testPartA_Sainity	|m|	m := Monom new.	self assert: ((m exp = 0) and: [m coef = 0]) .	m exp: 5.	m coef: 6.	self assert: ((m exp = 5) and: [m coef = 6]) .! !!TestPartA methodsFor: 'Tests' stamp: 'HW1 8/6/2018 12:30'!testPolynom	Transcript showln: 'Polynom Test'.	mn := Monom new.	pn := Polynom new.	mn exp: 2.	mn coef: 3.	"Check addMonom, eval and derivative"		monomD := mn derivative.	pn addMonom: mn.	pn addMonom: monomD.	mn exp: 5.	Transcript showln: 'pn ', pn.	self assert: ((pn eval: 1) = 9).	derivativePn := pn derivative.	self assert: ((derivativePn eval: 1) = 12).	"Check multiply"	pn multiplyByMonom: monomD.	self assert: ((pn eval: 1) = 54).	Transcript showln: 'Polynom Success'.! !